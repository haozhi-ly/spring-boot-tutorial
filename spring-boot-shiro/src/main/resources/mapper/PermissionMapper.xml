<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ly.dao.PermissionMapper" >
  <resultMap id="BaseResultMap" type="com.ly.entity.Permission" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="parent_id" property="parentId" jdbcType="BIGINT" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="url" property="url" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="order_num" property="orderNum" jdbcType="INTEGER" />
    <result column="has_delete" property="hasDelete" jdbcType="TINYINT" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from premission
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <!--keyProperty + useGeneratedKeys 类似与mysql这类自增主键，会自动设置他的值 -->
  <insert id="addPermission" parameterType="com.ly.entity.Permission" useGeneratedKeys="true" keyProperty="id"
      >
    insert into permission (parent_id, `name`,
      url, `type`, order_num, 
      has_delete, create_time)
    values (#{parentId,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR},
      #{url,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER}, #{orderNum,jdbcType=INTEGER}, 
      #{hasDelete,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.ly.entity.Permission" >
    update permission
    set parent_id = #{parentId,jdbcType=BIGINT},
      `name` = #{name,jdbcType=VARCHAR},
      url = #{url,jdbcType=VARCHAR},
      `type` = #{type,jdbcType=INTEGER},
      order_num = #{orderNum,jdbcType=INTEGER},
      has_delete = #{hasDelete,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select id, parent_id, `name`, url, `type`, order_num, has_delete, create_time
    from permission
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select distinct id, parent_id, `name`, url, `type`, order_num, has_delete, create_time
    from permission
    <where>
        <if test="roles != null">

            <foreach collection="roles" separator="," open="(" close=")" item="role">
                #{role.id}
            </foreach>
        </if>
    </where>
  </select>

  <select id="selectPermission" resultMap="BaseResultMap" >
    select distinct p.*
    from permission p,role_permission rp
    <where>
      p.id = rp.pid

      <if test="roleIds != null">
        and
        rp.role_id in
        <foreach collection="roleIds" separator="," open="(" close=")" item="roleId">
          #{roleId}
        </foreach>
      </if>
    </where>
  </select>



  <resultMap id="getPermissionTreeMap" type="com.ly.entity.Permission" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="parent_id" property="parentId" jdbcType="BIGINT" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="url" property="url" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="order_num" property="orderNum" jdbcType="INTEGER" />
    <result column="has_delete" property="hasDelete" jdbcType="TINYINT" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="rpId" property="rpId"/>
    <collection property="childrenPermission" javaType="ArrayList" ofType="Permission"
     column="parentId=id,rid=currentRid" select="queryPermissionByPermission"/>

  </resultMap>

  <select id="getPermissionTree" resultMap="getPermissionTreeMap" >
    select p.*,rp.id rpId,#{id} currentRid from permission  p  left join
    (select * from role_permission where role_id = #{id} ) rp
    on p.id = rp.pid where p.parent_id = 0
  </select>

  <select id="queryPermissionByPermission" parameterType="Permission" resultType="Permission">
    select p.*,rp.id rpId from permission  p  left join
    (select * from role_permission where role_id = #{rid} ) rp
    on p.id = rp.pid
    <where>
        <if test="parentId != null">
           p.parent_id =#{parentId}
        </if>

        <if test="ids != null and ids != ''">
           p.id in (${ids})
        </if>

    </where>
  </select>

    <delete id="clearPermissionByRoleId">
        delete from role_permission where role_id = #{roleId}
    </delete>

    <insert id="allocatePermission" >
        insert into role_permission (role_id, pid)
        values
        <foreach collection="pidList" item="pid"  separator=",">
          (#{roleId},#{pid})
        </foreach>

    </insert>

</mapper>